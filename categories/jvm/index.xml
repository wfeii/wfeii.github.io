<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM on 音视频技术部</title>
    <link>https://wfeii.github.io/categories/jvm/</link>
    <description>Recent content in JVM on 音视频技术部</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 04 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://wfeii.github.io/categories/jvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GC可达性实践-内存泄露分析</title>
      <link>https://wfeii.github.io/posts/2017-11-04-gc%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wfeii.github.io/posts/2017-11-04-gc%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90/</guid>
      <description>概述 Java中的对象回收是通过GC，但是在回收之前需要知道哪些对象是可回收的，哪些对象是不可回收的。
常见的回收机制 引用计数算法 引用算法是在对象中添加引用计数器，每当有地方引用了此对象时候，引用计数加1，当引用失效时候引用计数器减1。没有任何地方引用此对象时候，说明此对象不再使用，可以被回收。常见的是C++中的智能指针使用了此算法。而Java中并未使用此算法，为什么呢？后面再回答吧。
可达性分析算法 在Java中判断是否可回收是通过可达性来判断的。可达性分析的基本思路是通过一系列的称为“GC ROOT”的对象作为起点，从这些节点开始向下搜索，搜索所走过的路径称为引用链。当一个对象到GC ROOT没有任何引用链时说明此对象可被回收。 例如： 由于A，B对象没有引用链，因此可以被回收。
 注 GC模型中的均为对象，而不是类。
 Java中的引用 现在Java语言中，引用分为强引用，软引用，弱引用，虚引用。
强引用在代码中普遍存在， 类似于“Object object = new Object”，只要强引用存在，GC不会回收被引用的对象。
软引用在代码中不常见，用于描述一些还有用但并非必需的对象。对于软引用关联的对象，Java中用SoftReference来实现的。
弱引用描述非必需的对象，只被弱引用关联的对象只能生存到下一次GC发生之前，一旦GC被触发，只被弱引用引用的对象都会被回收。Java中用WeakReference来实现。
Java中GC ROOT简易模型分析 A对象释放了C的引用后，C，D对象无引用链可以到达,因此C，D对象可以被回收。
 A对象释放对C对象的引用，然而GC ROOT -&amp;gt; A -&amp;gt; B -&amp;gt; C -&amp;gt; D，到C对象有引用链可达,到D对象有引用链子可达，所有没有对象可以被回收。
 A释放对B，C的引用，根据引用链到B，C，D都不可达，因此B，C，D对象均可回收。 如果使用的是引用计数算法呢？ 由于B，C，D相互引用，导致了各个对象的引用计数器都不为0，从而均不可回收，对于相互循环引用的对象，引用计数算法不能很好的解决.
 包含弱引用情况，如下图B弱引用C 当A释放C的引用，由于B是弱引用C，弱引用只会存在到GC发生之前，相当于无引用链可达，因此C，D对象会可被回收。
 Android内存泄露 AsyncTask的使用中会经常的直接Activity或者Fragment中创建匿名内部类来使用，这样很容易导致Activity或者Fragment的泄露。
 public class TaskLeakActivity extends AppCompatActivity { @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); TextView textView = new TextView(this); textView.setText(&amp;quot;Task&amp;quot;); setContentView(textView); new AsyncTask&amp;lt;Void, Void, Void&amp;gt;() { @Override protected Void doInBackground(Void.</description>
    </item>
    
    <item>
      <title>GC可达性实践-内存泄露分析</title>
      <link>https://wfeii.github.io/posts/_posts/2017-11-04-gc%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://wfeii.github.io/posts/_posts/2017-11-04-gc%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90-%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90/</guid>
      <description>概述 Java中的对象回收是通过GC，但是在回收之前需要知道哪些对象是可回收的，哪些对象是不可回收的。
常见的回收机制 引用计数算法 引用算法是在对象中添加引用计数器，每当有地方引用了此对象时候，引用计数加1，当引用失效时候引用计数器减1。没有任何地方引用此对象时候，说明此对象不再使用，可以被回收。常见的是C++中的智能指针使用了此算法。而Java中并未使用此算法，为什么呢？后面再回答吧。
可达性分析算法 在Java中判断是否可回收是通过可达性来判断的。可达性分析的基本思路是通过一系列的称为“GC ROOT”的对象作为起点，从这些节点开始向下搜索，搜索所走过的路径称为引用链。当一个对象到GC ROOT没有任何引用链时说明此对象可被回收。 例如： 由于A，B对象没有引用链，因此可以被回收。
 注 GC模型中的均为对象，而不是类。
 Java中的引用 现在Java语言中，引用分为强引用，软引用，弱引用，虚引用。
强引用在代码中普遍存在， 类似于“Object object = new Object”，只要强引用存在，GC不会回收被引用的对象。
软引用在代码中不常见，用于描述一些还有用但并非必需的对象。对于软引用关联的对象，Java中用SoftReference来实现的。
弱引用描述非必需的对象，只被弱引用关联的对象只能生存到下一次GC发生之前，一旦GC被触发，只被弱引用引用的对象都会被回收。Java中用WeakReference来实现。
Java中GC ROOT简易模型分析 A对象释放了C的引用后，C，D对象无引用链可以到达,因此C，D对象可以被回收。
 A对象释放对C对象的引用，然而GC ROOT -&amp;gt; A -&amp;gt; B -&amp;gt; C -&amp;gt; D，到C对象有引用链可达,到D对象有引用链子可达，所有没有对象可以被回收。
 A释放对B，C的引用，根据引用链到B，C，D都不可达，因此B，C，D对象均可回收。 如果使用的是引用计数算法呢？ 由于B，C，D相互引用，导致了各个对象的引用计数器都不为0，从而均不可回收，对于相互循环引用的对象，引用计数算法不能很好的解决.
 包含弱引用情况，如下图B弱引用C 当A释放C的引用，由于B是弱引用C，弱引用只会存在到GC发生之前，相当于无引用链可达，因此C，D对象会可被回收。
 Android内存泄露 AsyncTask的使用中会经常的直接Activity或者Fragment中创建匿名内部类来使用，这样很容易导致Activity或者Fragment的泄露。
 public class TaskLeakActivity extends AppCompatActivity { @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); TextView textView = new TextView(this); textView.setText(&amp;quot;Task&amp;quot;); setContentView(textView); new AsyncTask&amp;lt;Void, Void, Void&amp;gt;() { @Override protected Void doInBackground(Void.</description>
    </item>
    
  </channel>
</rss>