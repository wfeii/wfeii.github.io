<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>重构 on 音视频技术部</title>
    <link>https://wfeii.github.io/tags/%E9%87%8D%E6%9E%84/</link>
    <description>Recent content in 重构 on 音视频技术部</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 30 Aug 2016 21:27:50 +0000</lastBuildDate>
    
	<atom:link href="https://wfeii.github.io/tags/%E9%87%8D%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>重构原则</title>
      <link>https://wfeii.github.io/posts/_posts/%E9%87%8D%E6%9E%84-%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1/2016-08-30-%E9%87%8D%E6%9E%84%E5%8E%9F%E5%88%99/</link>
      <pubDate>Tue, 30 Aug 2016 21:27:50 +0000</pubDate>
      
      <guid>https://wfeii.github.io/posts/_posts/%E9%87%8D%E6%9E%84-%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1/2016-08-30-%E9%87%8D%E6%9E%84%E5%8E%9F%E5%88%99/</guid>
      <description>{: .align-center}
何谓重构  重构 ： 对软件内部结构的一种调整，目的是在不改变软件可观察性的前提下，提高其可理解性，降低其修改的成本 。
 其实重构是在不改变代码的功能基础上，提高代码的可读性，提高代码的扩展性。
两顶帽子
添加新功能，重构。在软件开发中，两种情况不断变换，首先可能尝试添加新功能，其次意识到： 结构调整一下，功能更容易添加。于是就做一次重构，结构调整好之后，继续添加新功能，发现问题又会重构，就这样迭代。
 Notice: 在做新功能时候，不能只为添加新功能而添加新功能，需要保持代码的结构性，易读性。
 为何重构   重构改进软件设计
没有重构，程序的设计可能逐渐的不可控，程序的机构性会遭到破坏，代码的可读性也会降低。代码机构的流失是累积的，越难看出代码的设计意图，就越难保护其设计，代码的设计腐败的越快，代码的可控性就严重降低。 通过重构可以让所有的代码回归的到本身应该在的位置。重构帮助代码维持该有的设计。   重构使软件更容易理解
引用一句话，我觉得很恰当
 连傻子都能写出让机器机能运行的代码，但优秀的代码却是能让人理解的。
 程序设计很大程度上是跟计算机交流，但是除了跟计算机交流之外最重要的交流对象是人，写的连鬼都看不懂的代码，让人看个鬼，过了一段时间自己都看不懂自己写的代码就真是见了鬼了（这种情况比见到鬼容易多了，哈哈哈）。通过重构可以保证代码的可读性，而且通过重构可以更好的理解不熟悉的代码。
重构的开始可能只提留在细枝末节上。随着代码的简化，我们可以看到一些一些一切看不到的设计的层面的问题，有前辈把“早期重构”描述为“擦掉窗户上的污垢，使你看的更远”。如果没有重构，达不到这种层次。   重构帮助找到bug
对于代码的理解，可以帮助找到bug。通过重构更深入的理解代码的结构、行为，从而找到隐藏很深的bug。
 我不是一个伟大的程序员，我只是个有着一些优秀习惯的程序员 - Kent Beck
   提高编程速度
  良好的设计是快速开发的根本，拥有良好的设计才能快速的开发。如果没有良好的设计，或许一段时间内你的进展迅速，但恶劣的设计很快就让你的速度慢下来。会有大量的时间去调试，理解代码的逻辑，寻找重复的代码。最终坏的代码带来大的灾难。
重构一定程度提高了代码的扩展性，保持了代码良好的结构，添加新功能也就容易点。
何时重构  你不应该为了重构而重构，你之所以重构，是因为你想做别的什么事，而重构可以帮助你把事情做好。
 三次法则
 事不过三，三则重构
 出现了代码重复，说明需要重构了。
添加新功能时重构
 通过重构可以更好的理解代码的逻辑，理清代码的结构，更好的添加新功能。 代码的设计无法帮助我们轻松的添加想要的功能时候，就需要重构来更好的添加新功能。  修复bug时候
收到bug但是不能一眼看出bug的问题，很大程度说明代码的逻辑不够清楚，需要重构了。
复审代码时重构 复审者提出好的建议，然后一起探讨一些修改能否通过重构轻松实现，如果是这样，一起着手修改，这样保证了代码的质量
为什么重构有用
程序有两方面的价值
 今天可以为你做什么 明天可以为你做什么 我们都只关注今天想要程序做什么。修复bug,添加新功能，我们都是为了让程序能力更强，让它今天更有价值。如果为了今天的工作不择手段，导致不可能在明天完成任务，最终还是失败。重构是摆脱这个困境的道路。如果发现昨天的决定已经不能适应今天的情况，放心改变这个决定就是，然后就可以完成今天的决定，日复一日。  是什么程序难以修改</description>
    </item>
    
    <item>
      <title>重构原则</title>
      <link>https://wfeii.github.io/posts/%E9%87%8D%E6%9E%84-%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1/2016-08-30-%E9%87%8D%E6%9E%84%E5%8E%9F%E5%88%99/</link>
      <pubDate>Tue, 30 Aug 2016 21:27:50 +0000</pubDate>
      
      <guid>https://wfeii.github.io/posts/%E9%87%8D%E6%9E%84-%E6%97%A2%E6%9C%89%E4%BB%A3%E7%A0%81%E7%9A%84%E8%AE%BE%E8%AE%A1/2016-08-30-%E9%87%8D%E6%9E%84%E5%8E%9F%E5%88%99/</guid>
      <description>{: .align-center}
何谓重构  重构 ： 对软件内部结构的一种调整，目的是在不改变软件可观察性的前提下，提高其可理解性，降低其修改的成本 。
 其实重构是在不改变代码的功能基础上，提高代码的可读性，提高代码的扩展性。
两顶帽子
添加新功能，重构。在软件开发中，两种情况不断变换，首先可能尝试添加新功能，其次意识到： 结构调整一下，功能更容易添加。于是就做一次重构，结构调整好之后，继续添加新功能，发现问题又会重构，就这样迭代。
 Notice: 在做新功能时候，不能只为添加新功能而添加新功能，需要保持代码的结构性，易读性。
 为何重构   重构改进软件设计
没有重构，程序的设计可能逐渐的不可控，程序的机构性会遭到破坏，代码的可读性也会降低。代码机构的流失是累积的，越难看出代码的设计意图，就越难保护其设计，代码的设计腐败的越快，代码的可控性就严重降低。 通过重构可以让所有的代码回归的到本身应该在的位置。重构帮助代码维持该有的设计。   重构使软件更容易理解
引用一句话，我觉得很恰当
 连傻子都能写出让机器机能运行的代码，但优秀的代码却是能让人理解的。
 程序设计很大程度上是跟计算机交流，但是除了跟计算机交流之外最重要的交流对象是人，写的连鬼都看不懂的代码，让人看个鬼，过了一段时间自己都看不懂自己写的代码就真是见了鬼了（这种情况比见到鬼容易多了，哈哈哈）。通过重构可以保证代码的可读性，而且通过重构可以更好的理解不熟悉的代码。
重构的开始可能只提留在细枝末节上。随着代码的简化，我们可以看到一些一些一切看不到的设计的层面的问题，有前辈把“早期重构”描述为“擦掉窗户上的污垢，使你看的更远”。如果没有重构，达不到这种层次。   重构帮助找到bug
对于代码的理解，可以帮助找到bug。通过重构更深入的理解代码的结构、行为，从而找到隐藏很深的bug。
 我不是一个伟大的程序员，我只是个有着一些优秀习惯的程序员 - Kent Beck
   提高编程速度
  良好的设计是快速开发的根本，拥有良好的设计才能快速的开发。如果没有良好的设计，或许一段时间内你的进展迅速，但恶劣的设计很快就让你的速度慢下来。会有大量的时间去调试，理解代码的逻辑，寻找重复的代码。最终坏的代码带来大的灾难。
重构一定程度提高了代码的扩展性，保持了代码良好的结构，添加新功能也就容易点。
何时重构  你不应该为了重构而重构，你之所以重构，是因为你想做别的什么事，而重构可以帮助你把事情做好。
 三次法则
 事不过三，三则重构
 出现了代码重复，说明需要重构了。
添加新功能时重构
 通过重构可以更好的理解代码的逻辑，理清代码的结构，更好的添加新功能。 代码的设计无法帮助我们轻松的添加想要的功能时候，就需要重构来更好的添加新功能。  修复bug时候
收到bug但是不能一眼看出bug的问题，很大程度说明代码的逻辑不够清楚，需要重构了。
复审代码时重构 复审者提出好的建议，然后一起探讨一些修改能否通过重构轻松实现，如果是这样，一起着手修改，这样保证了代码的质量
为什么重构有用
程序有两方面的价值
 今天可以为你做什么 明天可以为你做什么 我们都只关注今天想要程序做什么。修复bug,添加新功能，我们都是为了让程序能力更强，让它今天更有价值。如果为了今天的工作不择手段，导致不可能在明天完成任务，最终还是失败。重构是摆脱这个困境的道路。如果发现昨天的决定已经不能适应今天的情况，放心改变这个决定就是，然后就可以完成今天的决定，日复一日。  是什么程序难以修改</description>
    </item>
    
  </channel>
</rss>